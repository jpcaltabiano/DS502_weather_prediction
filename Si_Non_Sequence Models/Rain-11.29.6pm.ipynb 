{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from math import pi\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import figure\n",
    "import seaborn as sns\n",
    "\n",
    "from IPython.display import display, Markdown\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.preprocessing import PowerTransformer\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn import svm\n",
    "from sklearn.linear_model import Lasso, LogisticRegression\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import plot_roc_curve\n",
    "# from sklearn.base import clone\n",
    "\n",
    "import keras\n",
    "from keras.models import Model\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Convolution1D as Conv1D\n",
    "from keras.layers import ZeroPadding1D, MaxPooling1D, BatchNormalization, Activation, Dropout, Flatten, Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(109641, 26)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'Location', 'MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation',\n",
       "       'Sunshine', 'WindGustDir', 'WindGustSpeed', 'WindDir9am', 'WindDir3pm',\n",
       "       'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am', 'Humidity3pm',\n",
       "       'Pressure9am', 'Pressure3pm', 'Cloud9am', 'Cloud3pm', 'Temp9am',\n",
       "       'Temp3pm', 'RainToday', 'RISK_MM', 'RainTomorrow', 'lat', 'lon'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"training_set.csv\")\n",
    "location_df = pd.read_csv(\"locations.csv\")\n",
    "\n",
    "#check all columns\n",
    "df_loc = df.join(location_df.set_index('Location'), on='Location')\n",
    "print(df_loc.shape)\n",
    "df_loc.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# take out test set (2015)\n",
    "df[\"Date\"] = pd.to_datetime(df['Date'])\n",
    "df.insert(1, \"Year\", df[\"Date\"].dt.year, True)\n",
    "test = df[df.Year == 2015].copy(deep = True)\n",
    "train = df[df.Year != 2015].copy(deep = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "number of obdervations with rainfall>200mm: 11\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.Rainfall[df.Rainfall>50].hist()\n",
    "print()\n",
    "print(\"number of obdervations with rainfall>200mm:\",len(df.Rainfall[df.Rainfall>200]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# USEAGE\n",
    "# Each function takes 'df' as pandas dataframe object and returns the modified dataframe.\n",
    "# add_locs also takes a datafrane of the locations\n",
    "# example:\n",
    "#   data = pd.read_csv(\"weatherAUS.csv\")\n",
    "#   data = wind_vectors(data)\n",
    "#   locations = pd.read_csv(\"lcoations.csv\")\n",
    "#   data = add_locs(data, locations)\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "\n",
    "# add location coordinates\n",
    "def add_locs(df, location_df):\n",
    "    return df.join(location_df.set_index('Location'), on='Location')\n",
    "\n",
    "# convert yes and no strings to binary\n",
    "def binary_target(df):\n",
    "    df[\"RainTomorrow\"] = df[\"RainTomorrow\"].replace(('Yes', 'No'), (1, 0))\n",
    "    df[\"RainToday\"] = df[\"RainToday\"].replace(('Yes', 'No'), (1, 0))\n",
    "    return df\n",
    "\n",
    "def wind_vectors(df):\n",
    "    df['WindGustDir'] = df['WindGustDir'].replace(\n",
    "        ('N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW','SW','WSW','W','WNW','NW','NNW'),\n",
    "        (0, 22.5, 45, 67.5, 90, 112.5, 135, 157.5, 180, 202.5, 225, 247.5, 270, 292.5, 315, 337.5)\n",
    "    )\n",
    "\n",
    "    df['WindDir9am'] = df['WindDir9am'].replace(\n",
    "        ('N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW','SW','WSW','W','WNW','NW','NNW'),\n",
    "        (0, 22.5, 45, 67.5, 90, 112.5, 135, 157.5, 180, 202.5, 225, 247.5, 270, 292.5, 315, 337.5)\n",
    "    )\n",
    "\n",
    "    df['WindDir3pm'] = df['WindDir3pm'].replace(\n",
    "        ('N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW','SW','WSW','W','WNW','NW','NNW'),\n",
    "        (0, 22.5, 45, 67.5, 90, 112.5, 135, 157.5, 180, 202.5, 225, 247.5, 270, 292.5, 315, 337.5)\n",
    "    )\n",
    "\n",
    "    wv = df.pop('WindGustSpeed')\n",
    "    wd = df.pop('WindGustDir')*np.pi/180\n",
    "    df['WindGustX'] = wv*np.cos(wd)\n",
    "    df['WindGustY'] = wv*np.sin(wd)\n",
    "\n",
    "    wv = df.pop('WindSpeed9am')\n",
    "    wd = df.pop('WindDir9am')*np.pi/180\n",
    "    df['Wind9amX'] = wv*np.cos(wd)\n",
    "    df['Wind9amY'] = wv*np.sin(wd)\n",
    "\n",
    "    wv = df.pop('WindSpeed3pm')\n",
    "    wd = df.pop('WindDir3pm')*np.pi/180\n",
    "    df['Wind3pmX'] = wv*np.cos(wd)\n",
    "    df['Wind3pmY'] = wv*np.sin(wd)\n",
    "\n",
    "    return df\n",
    "\n",
    "def date_to_signal(df):\n",
    "    data_date = pd.to_datetime(df['Date'])\n",
    "    timestamp_s = data_date.map(datetime.datetime.timestamp)\n",
    "    day = 24*60*60\n",
    "    year = (365.2425)*day\n",
    "    month = data_date.dt.month\n",
    "    season = ((month -1)%12 + 3)//3\n",
    "    df['daysin'] = np.sin(timestamp_s * (2 * np.pi/day))\n",
    "    df['daycos'] = np.cos(timestamp_s * (2 * np.pi/day))\n",
    "    df['yearsin'] = np.sin(timestamp_s * (2 * np.pi/year))\n",
    "    df['yearcos'] = np.cos(timestamp_s * (2 * np.pi/year))\n",
    "    df['monthsin'] = np.sin((month-1)*(2.*np.pi/12))\n",
    "    df['monthcos'] = np.cos((month-1)*(2.*np.pi/12))\n",
    "    df['seasonsin'] = np.sin((month-1)*(2.*np.pi/4))\n",
    "    df['seasoncos'] = np.cos((month-1)*(2.*np.pi/4))\n",
    "\n",
    "    return df\n",
    "\n",
    "# shif certain column down by 1 day (each entry gets yesterday's info)\n",
    "def lag(df):\n",
    "    df = df.copy(deep= True)\n",
    "    df['Date'] = pd.to_datetime(df['Date'])\n",
    "    df = df.set_index([\"Date\",\"Location\"])\n",
    "    lag_cols = ['MinTemp','MaxTemp','Rainfall','Humidity3pm','Pressure3pm','WindGustX','WindGustY','RainToday']\n",
    "\n",
    "    shit_days = [1,2]\n",
    "    for d in shit_days:\n",
    "        shifted = df[lag_cols].groupby(level=\"Location\").shift(d)\n",
    "        shifted = shifted.rename(columns=lambda x: x+\"_lag\"+str(d))\n",
    "        df = pd.merge(df, shifted, how='left', left_index=True, right_index=True)\n",
    "           \n",
    "    df = df.reset_index() \n",
    "    \n",
    "    return df\n",
    "\n",
    "# deiffernce from month and year average\n",
    "def mean_diff(df):\n",
    "    \n",
    "    df['Date'] = pd.to_datetime(df['Date'])\n",
    "    df.insert(2, \"Month\", df[\"Date\"].dt.month, True)\n",
    "    df = df.set_index([\"Location\", \"Year\", \"Month\"])\n",
    "    mean_cols = ['MinTemp','MaxTemp','Rainfall','Humidity3pm','Pressure3pm','WindGustX','WindGustY']\n",
    "    \n",
    "    # month mean\n",
    "    mean = pd.DataFrame(df[mean_cols].groupby(level=[0,1,2]).mean())\n",
    "    mean = mean.rename(columns=lambda x: x+\"_month_mean\")\n",
    "    df = pd.merge(df, mean, how='left', left_index=True, right_index=True)\n",
    "    \n",
    "    # year mean\n",
    "    mean_year = pd.DataFrame(df[mean_cols].groupby(level=[0,1]).mean())\n",
    "    mean_year = mean_year.rename(columns=lambda x: x+\"_year_mean\")\n",
    "    df = pd.merge(df, mean_year, how='left', left_index=True, right_index=True)\n",
    "    \n",
    "    for col in mean_cols:\n",
    "        #month diff\n",
    "        mean = col+\"_month_mean\"\n",
    "        new_name = col + \"_month_diff\"\n",
    "        df[new_name] = df[col] - df[mean]\n",
    "        df.drop(mean,axis=1,inplace=True)\n",
    "        \n",
    "        #year diff\n",
    "        mean_year = col+\"_year_mean\"\n",
    "        new_name_year = col + \"_year_diff\"\n",
    "        df[new_name_year] = df[col] - df[mean_year]\n",
    "        df.drop(mean_year,axis=1,inplace=True)\n",
    "    \n",
    "    df = df.reset_index() \n",
    "    df.drop(\"Month\",axis=1,inplace=True)\n",
    "    \n",
    "    return df\n",
    "\n",
    "def aug_all(df, location_df):\n",
    "    df = add_locs(df, location_df)\n",
    "    df = binary_target(df)\n",
    "    df = date_to_signal(df)\n",
    "    df = wind_vectors(df)\n",
    "    df = lag(df)\n",
    "    df = mean_diff(df)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [],
   "source": [
    "# USEAGE\n",
    "# df should have turned 'Date' column as pd.to_datetime(df['Date'])\n",
    "# df has inserted a 2nd colum 'Year': df.insert(1, \"Year\", df[\"Date\"].dt.year, True)\n",
    "# median = None: this is to preprocess test data that's never seen\n",
    "# median != None, will return processed df, and medians, powertransform fit, and minmaxsclar fit from training data, \n",
    "# They will be used to transform test data.\n",
    "\n",
    "def preprocess(df, median = None, pt_fit = None, mms_f = None):\n",
    "\n",
    "    \n",
    "    ### 1. add lon, lat columns and features engineering\n",
    "    df = aug_all(df, location_df)\n",
    "    #df = df.sort_index()\n",
    "    \n",
    "    ### 2. drop some column ###\n",
    "    df.drop(\"Date\",axis=1,inplace=True)\n",
    "#     df.drop(\"Year\",axis=1,inplace=True)\n",
    "    df.drop(\"RISK_MM\",axis=1,inplace = True)\n",
    "    #remove highly correlated columns\n",
    "    df.drop(columns = [\"Temp3pm\", \"Temp9am\", \"Pressure9am\"], axis=1, inplace = True)\n",
    "    #print('1. columns:', df.columns)\n",
    "    \n",
    "    ### 3. define columns ###\n",
    "    # high missing % columns\n",
    "    miss_col_30 = ['Sunshine', 'Evaporation', 'Cloud3pm', 'Cloud9am']\n",
    "    \n",
    "    # \n",
    "    \n",
    "    # catogorical and numerical columns\n",
    "    cat_cols = []\n",
    "    num_cols = []\n",
    "    other_cols = []\n",
    "\n",
    "    for each in df.columns:\n",
    "        if df[each].dtype == \"object\":\n",
    "            cat_cols.append(each)\n",
    "        elif df[each].dtype == \"float64\":\n",
    "            num_cols.append(each)\n",
    "        else:\n",
    "            other_cols.append(each)\n",
    "\n",
    "    \n",
    "    ### 4. data preprocessing ###\n",
    "    \n",
    "    # drop columns with too many missing values\n",
    "    df_clean = df.copy(deep = True)\n",
    "    df_clean.drop(columns = miss_col_30, axis=1, inplace = True)\n",
    "    to_remove = miss_col_30\n",
    "    num_cols = [i for i in num_cols if i not in to_remove]\n",
    "    \n",
    "    # Fill missing value with median\n",
    "    # if this is for training data\n",
    "    if median == None:\n",
    "        medians = []\n",
    "        for k in num_cols:\n",
    "            df_clean[k].fillna(value=df[k].median(),inplace=True)\n",
    "            medians.append(df[k].median())\n",
    "    # # if this is for test data, use the median values of training data\n",
    "    else: \n",
    "        medians = median\n",
    "        i = 0\n",
    "        for k in num_cols:\n",
    "            df_clean[k].fillna(value = medians[i],inplace=True)\n",
    "            i += 1\n",
    "        \n",
    "    # one hot encoder\n",
    "    df1 = pd.get_dummies(df_clean.Location)\n",
    "    df_prepared = pd.concat([df_clean, df1], axis=1)\n",
    "    \n",
    "    # drop more columns \n",
    "    df_prepared.drop(columns = [\"Location\"],axis=1,inplace=True)\n",
    "    #print('1. columns:',df_prepared.columns)\n",
    "    \n",
    "    # Drop rainfall outliers: only 13 entries, but they stretch the range to almost twice.\n",
    "    df_prepared = df_prepared.drop(df_prepared[df_prepared['Rainfall']> 200].index)\n",
    "\n",
    "    \n",
    "    if pt_fit == None:\n",
    "        # Power transform 'Rainfall' column that's serious skewed\n",
    "        a = np.array(df_prepared['Rainfall'].values.tolist()).reshape(-1, 1)\n",
    "        pt = PowerTransformer(method='yeo-johnson')\n",
    "        pt_fit = pt.fit(a)\n",
    "        features_trans = pt_fit.transform(a)\n",
    "        # df1.skew()\n",
    "        df_prepared['Rainfall'] = features_trans\n",
    "    else: \n",
    "        a = np.array(df_prepared['Rainfall'].values.tolist()).reshape(-1, 1)\n",
    "        features_trans = pt_fit.transform(a)\n",
    "        # df1.skew()\n",
    "        df_prepared['Rainfall'] = features_trans\n",
    "    \n",
    "    #Normalize\n",
    "    if mms_f == None:\n",
    "        mms = MinMaxScaler()\n",
    "        mms_fit = mms.fit(df_prepared)\n",
    "        df_prepared[df_prepared.columns[:]] = mms_fit.fit_transform(df_prepared)\n",
    "    else: \n",
    "        mms_fit = mms_f\n",
    "        df_prepared[df_prepared.columns[:]] = mms_fit.fit_transform(df_prepared)\n",
    "    \n",
    "    \n",
    "    if median == None:\n",
    "        return df_prepared, medians, pt_fit, mms_fit\n",
    "    else:\n",
    "        return df_prepared\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((92401, 25), (92401, 104))"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# transform traning data\n",
    "train_df = train.copy(deep=True)\n",
    "train_df, medians, pt_fit, mms_fit = preprocess(train_df)\n",
    "\n",
    "train.shape, train_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((17231, 25), (17229, 104))"
      ]
     },
     "execution_count": 453,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tranform test data\n",
    "test_df = test.copy(deep=True)\n",
    "# use the medians in training set to fill missing values in test days\n",
    "test_df= preprocess(test, medians, pt_fit, mms_fit)\n",
    "test.shape, test_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Prepare for training\n",
    "## 3.1 train, test, validation split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X train: (92401, 102) \n",
      "y train: (92401,) \n",
      "X test: (17229, 102) \n",
      "y test: (17229,)\n"
     ]
    }
   ],
   "source": [
    "X_train = train_df.drop(columns = [\"RainTomorrow\",'Year'], axis = 1)\n",
    "y_train = train_df[\"RainTomorrow\"]\n",
    "\n",
    "X_test = test_df.drop(columns = [\"RainTomorrow\",'Year'], axis = 1)\n",
    "y_test = test_df[\"RainTomorrow\"]\n",
    "\n",
    "# list of columns\n",
    "l = X_train.columns\n",
    "print(\"X train:\",X_train.shape, \"\\ny train:\", y_train.shape, \"\\nX test:\",X_test.shape, \"\\ny test:\",y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X train1: (64680, 102) \n",
      "y train1: (64680,) \n",
      "X valid: (27721, 102) \n",
      "y valid: (27721,)\n"
     ]
    }
   ],
   "source": [
    "X_train1, X_valid, y_train1, y_valid = train_test_split(X_train, y_train, test_size=0.30, random_state=0)\n",
    "print(\"X train1:\",X_train1.shape, \"\\ny train1:\", y_train1.shape, \"\\nX valid:\",X_valid.shape, \"\\ny valid:\",y_valid.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(92401, 72)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca = PCA(0.99, whiten=True)\n",
    "pac_train = pca.fit(X_train)\n",
    "principalComponents = pac_train.transform(X_train)\n",
    "#fit-train, transform-test\n",
    "X_train_PCA = pd.DataFrame(data = principalComponents)\n",
    "X_train_PCA.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.3 use 15 most Important features based on coefficient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cv_important_features(clf, clf_coef= None):\n",
    "    \n",
    "    # if random forest\n",
    "    if clf_coef:\n",
    "        coef = np.round(clf.feature_importances_,2)\n",
    "        coef = list(coef.reshape(coef.shape[0],))\n",
    "    else: \n",
    "        coef = np.round(clf.coef_,2)\n",
    "        coef = list(coef.reshape(coef.shape[1],))\n",
    "    l = X_train.columns\n",
    "\n",
    "    d = {} \n",
    "    for key in l: \n",
    "        for value in coef: \n",
    "            d[key] = value \n",
    "            coef.remove(value) \n",
    "            break\n",
    "\n",
    "    predictor_coef = {k: v for k, v in sorted(d.items(), reverse=True, key=lambda item: abs(item[1]))}\n",
    "    # select top 1o features \n",
    "    impt_15f= [k for k,v in predictor_coef.items()][:15]\n",
    "    impt_10f = impt_15f[:10]\n",
    "    \n",
    "    # compared wiht cv using top 10 features\n",
    "    start_time_sgd_impt = time.time()\n",
    "    scores_10impt = cross_val_score(clf, X_train[impt_10f], y_train, cv=5, scoring=\"accuracy\")\n",
    "    print(\"Took  %s seconds  for 5-fold CV using 10 most important features\" % round((time.time() - start_time_sgd_impt),2))\n",
    "    print(\"cv scores using 15 most important features:\",scores_10impt,)\n",
    "    avg_scores_10 = scores_10impt.mean()\n",
    "    print('Average score:', avg_scores_10)\n",
    "    print()\n",
    "    \n",
    "    # compared wiht cv using top 15 features\n",
    "    start_time_sgd_impt = time.time()\n",
    "    scores_impt = cross_val_score(clf, X_train[impt_15f], y_train, cv=5, scoring=\"accuracy\")\n",
    "    print(\"Took  %s seconds  for 5-fold CV using 15 most important features\" % round((time.time() - start_time_sgd_impt),2))\n",
    "    print(\"cv scores using 15 most important features:\",scores_10impt,)\n",
    "    avg_scores = scores_impt.mean()\n",
    "    print('Average score:', avg_scores)\n",
    "    print()\n",
    "    \n",
    "    # compared wiht cv using all features\n",
    "    start_time = time.time()\n",
    "    scores_all = cross_val_score(clf, X_train, y_train, cv=5, scoring='accuracy')\n",
    "    print(\"Took %s seconds for 5-fold CV using all feature\" % round((time.time() - start_time),2))\n",
    "    print(\"cv scores using all features:\",scores_all)\n",
    "    avg_scores_all = scores_all.mean()\n",
    "    print('Average score:', avg_scores_all)\n",
    "    print()\n",
    "    \n",
    "    diff = round((avg_scores - avg_scores_all)*100,2)\n",
    "    diff10 = round((avg_scores_10 - avg_scores)*100,2)\n",
    "    if (diff>=0):\n",
    "        print('Using most important 15 features IMPROVED average CV accuracy by '+str(diff)+' %')\n",
    "        if  diff10 > 0:\n",
    "            print('AND using most important 10 features IMPROVED average CV accuracy by '+str(diff10+diff)+' %')    \n",
    "    else:\n",
    "        print('Using most important 15 features decresed average CV accuracy by '+str(diff)+' %')\n",
    "    \n",
    "    return predictor_coef, impt_15f, scores_impt, scores_all"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Train Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.5 SGD classifier - FAST!\n",
    "\n",
    "#Stochastic Gradient Descent (SGD) classifier. This classifier has the advantage of being capable of handling very large datasets efficiently. This is in part because SGD deals with training instances independently, one at a time (which also makes SGD well suited for online learning)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set accuracy: 0.8445254921483534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "sgd_clf = SGDClassifier(random_state=42)\n",
    "\n",
    "sgd_clf.fit(X_train, y_train)\n",
    "y_pred_sgd=sgd_clf.predict(X_train)\n",
    "print('Training set accuracy:',accuracy_score(y_train,y_pred_sgd))\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.5.1 Classifier evaluation metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.86      0.95      0.90     71753\n",
      "         1.0       0.74      0.47      0.57     20648\n",
      "\n",
      "    accuracy                           0.84     92401\n",
      "   macro avg       0.80      0.71      0.74     92401\n",
      "weighted avg       0.83      0.84      0.83     92401\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_train, y_pred_sgd))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 46.77%\n",
      "Specificity(ability to detect Not rain in normal days): 95.29%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "def visual_cm(y_train, y_pred):\n",
    "    cm = confusion_matrix(y_train, y_pred,labels = [1,0])\n",
    "    group_names = ['TP','FN','FP','TN']\n",
    "\n",
    "    group_counts = [\"{0:0.0f}\".format(value) for value in\n",
    "                    cm.flatten()]\n",
    "    group_percentages = [\"{0:.2%}\".format(value) for value in\n",
    "                         cm.flatten()/np.sum(cm)]\n",
    "    labels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in\n",
    "              zip(group_names,group_counts,group_percentages)]\n",
    "    labels = np.asarray(labels).reshape(2,2)\n",
    "    sns.heatmap(cm, annot=labels, fmt='', cmap='Blues', xticklabels = [1,0], yticklabels = ['Rain','No Rain'])\n",
    "    \n",
    "    sensitivity = \"{0:.2%}\".format(cm[0,0]/(cm[0,0]+cm[0,1]))\n",
    "    specificity = \"{0:.2%}\".format(cm[1,1]/(cm[1,0]+cm[1,1]))\n",
    "    print(\"Sensitivity(ability to detect rain in rainy days):\", sensitivity)\n",
    "    print(\"Specificity(ability to detect Not rain in normal days):\",specificity)\n",
    "    \n",
    "visual_cm(y_train, y_pred_sgd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TN is less than FN. bad"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  4.5.1 Cross validation and most important predictors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set accuracy: 0.8425125269207043\n",
      "\n",
      "Took  0.81 seconds  for 5-fold CV using 10 most important features\n",
      "cv scores using 15 most important features: [0.84135058 0.83290043 0.82786797 0.83906926 0.83582251]\n",
      "Average score: 0.8354021498855382\n",
      "\n",
      "Took  0.84 seconds  for 5-fold CV using 15 most important features\n",
      "cv scores using 15 most important features: [0.84135058 0.83290043 0.82786797 0.83906926 0.83582251]\n",
      "Average score: 0.8386164010493051\n",
      "\n",
      "Took 3.02 seconds for 5-fold CV using all feature\n",
      "cv scores using all features: [0.84887181 0.76677489 0.78262987 0.83430736 0.83652597]\n",
      "Average score: 0.8138219819067718\n",
      "\n",
      "Using most important 15 features IMPROVED average CV accuracy by 2.48 %\n"
     ]
    }
   ],
   "source": [
    "predictor_coef_sgd, impt_15f_sgd, scores_impt_sgd, scores_all_sgd = cv_important_features(sgd_clf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'MaxTemp': 0.63,\n",
       " 'daycos': 0.48,\n",
       " 'monthsin': 0.48,\n",
       " 'lon': 0.22,\n",
       " 'Humidity9am': -0.21,\n",
       " 'monthcos': -0.18,\n",
       " 'Hobart': 0.18,\n",
       " 'yearsin': 0.17,\n",
       " 'yearcos': 0.17,\n",
       " 'Brisbane': -0.17,\n",
       " 'WindGustX': -0.16,\n",
       " 'Ballarat': -0.15,\n",
       " 'MinTemp': -0.14,\n",
       " 'Bendigo': -0.14,\n",
       " 'Dartmoor': -0.12,\n",
       " 'Melbourne': -0.12,\n",
       " 'MinTemp_year_diff': 0.11,\n",
       " 'daysin': -0.09,\n",
       " 'BadgerysCreek': 0.09,\n",
       " 'seasoncos': 0.08,\n",
       " 'Pressure3pm_lag1': 0.08,\n",
       " 'WindGustX_lag1': 0.08,\n",
       " 'Katherine': -0.08,\n",
       " 'RainToday': -0.07,\n",
       " 'lat': 0.07,\n",
       " 'Adelaide': -0.07,\n",
       " 'Pressure3pm': 0.06,\n",
       " 'WindGustY': 0.06,\n",
       " 'MaxTemp_lag1': -0.06,\n",
       " 'MinTemp_lag2': -0.06,\n",
       " 'MinTemp_month_diff': 0.06,\n",
       " 'Pressure3pm_month_diff': -0.06,\n",
       " 'CoffsHarbour': -0.06,\n",
       " 'Launceston': -0.06,\n",
       " 'Rainfall_lag2': 0.05,\n",
       " 'MaxTemp_month_diff': -0.05,\n",
       " 'seasonsin': 0.04,\n",
       " 'Wind3pmX': 0.04,\n",
       " 'MaxTemp_lag2': -0.04,\n",
       " 'Pressure3pm_year_diff': -0.04,\n",
       " 'Cairns': 0.04,\n",
       " 'Wind3pmY': -0.03,\n",
       " 'WindGustY_lag1': -0.03,\n",
       " 'WindGustX_lag2': -0.03,\n",
       " 'Rainfall_year_diff': -0.03,\n",
       " 'Humidity3pm_month_diff': 0.03,\n",
       " 'Humidity3pm_year_diff': 0.03,\n",
       " 'Canberra': -0.03,\n",
       " 'MinTemp_lag1': 0.02,\n",
       " 'RainToday_lag1': -0.02,\n",
       " 'Pressure3pm_lag2': -0.02,\n",
       " 'WindGustY_lag2': -0.02,\n",
       " 'RainToday_lag2': -0.02,\n",
       " 'MaxTemp_year_diff': -0.02,\n",
       " 'WindGustY_year_diff': 0.02,\n",
       " 'Albany': 0.02,\n",
       " 'Albury': 0.02,\n",
       " 'Darwin': -0.02,\n",
       " 'GoldCoast': -0.02,\n",
       " 'Rainfall': 0.01,\n",
       " 'Humidity3pm': 0.01,\n",
       " 'Wind9amY': 0.01,\n",
       " 'Humidity3pm_lag1': 0.01,\n",
       " 'Humidity3pm_lag2': 0.01,\n",
       " 'WindGustX_month_diff': -0.01,\n",
       " 'WindGustX_year_diff': 0.01,\n",
       " 'WindGustY_month_diff': 0.01,\n",
       " 'AliceSprings': 0.01,\n",
       " 'Wind9amX': -0.0,\n",
       " 'Rainfall_lag1': 0.0,\n",
       " 'Rainfall_month_diff': 0.0,\n",
       " 'Cobar': -0.0}"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictor_coef_sgd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.5.2 Use PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set accuracy on PCA: 0.8347961602147163\n"
     ]
    }
   ],
   "source": [
    "# use PCA for cross validation\n",
    "sgd_clf_pca = SGDClassifier(random_state=42)\n",
    "\n",
    "sgd_clf_pca.fit(X_train, y_train)\n",
    "sgd_clf_pca.fit(X_train_PCA, y_train)\n",
    "y_pred_sgd_pca=sgd_clf_pca.predict(X_train_PCA)\n",
    "print('Training set accuracy on PCA:',accuracy_score(y_train,y_pred_sgd_pca))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "### selet most important PCA\n",
    "from sklearn.feature_selection import RFE\n",
    "\n",
    "# n_features_to_select=1 to rank all features\n",
    "selector = RFE(sgd_clf_pca, n_features_to_select=1, step=1)\n",
    "selector = selector.fit(X_train_PCA, y_train)\n",
    "\n",
    "rank_pca = list(selector.ranking_)\n",
    "pca_col = X_train_PCA.columns\n",
    "\n",
    "d_pca = {} \n",
    "for key in pca_col: \n",
    "    for value in rank_pca: \n",
    "        d_pca[key] = value \n",
    "        rank_pca.remove(value) \n",
    "        break\n",
    "\n",
    "predictor_rank_pca = {k: v for k, v in sorted(d_pca.items(), key=lambda item: abs(item[1]))}\n",
    "# select top 10 features \n",
    "impt_15_rfe_pca= [k for k,v in predictor_rank_pca.items()][:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set accuracy on most imprtant PCA: 0.8352074111752037\n"
     ]
    }
   ],
   "source": [
    "sgd_clf_pca.fit(X_train_PCA[impt_15_rfe_pca], y_train)\n",
    "y_pred_sgd_pca=sgd_clf_pca.predict(X_train_PCA[impt_15_rfe_pca])\n",
    "print('Training set accuracy on most imprtant PCA:',accuracy_score(y_train,y_pred_sgd_pca))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.830726808227755"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores_all = cross_val_score(sgd_clf_pca, X_train_PCA[impt_15_rfe_pca], y_train, cv=5, scoring='accuracy')\n",
    "scores_all.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "most important 15 PCs: [10, 1, 13, 8, 68, 12, 58, 17, 3, 0, 18, 60, 40, 57, 54]\n"
     ]
    }
   ],
   "source": [
    "print(\"most important 15 PCs:\",impt_15_rfe_pca)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.5* cross validate on a whole year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.83, 0.84, 0.83, 0.83, 0.85, 0.85, 0.84, 0.77]"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2015 is held out as the test set, other years will be held out one by one as validation set.\n",
    "train_df1 = train_df.copy(deep=True)\n",
    "cv_score_year = []\n",
    "\n",
    "for y in train_df1.Year.unique():\n",
    "\n",
    "    train1 = train_df1 [(train_df1.Year != y)]\n",
    "    valid = train_df1 [train_df1.Year == y]\n",
    "\n",
    "    X_train1 = train1.drop(columns = [\"RainTomorrow\", \"Year\"], axis = 1)\n",
    "    y_train1 = train1[\"RainTomorrow\"]\n",
    "\n",
    "    X_valid = valid.drop(columns = [\"RainTomorrow\", \"Year\"], axis=1)\n",
    "    y_valid = valid[\"RainTomorrow\"]\n",
    "\n",
    "    sgd_clf1 = SGDClassifier(random_state=42)\n",
    "    sgd_clf1.fit(X_train1, y_train1)\n",
    "    y_pred_sgd1=sgd_clf1.predict(X_valid)\n",
    "    score = round(accuracy_score(y_valid,y_pred_sgd1),2)\n",
    "    cv_score_year.append(score)\n",
    "    \n",
    "cv_score_year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### similar result to k-fold cv split ####"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1 Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8448501639592645"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_lr = LogisticRegression(C=1, penalty='l1', solver='liblinear')\n",
    "clf_lr.fit(X_train, y_train)\n",
    "#Predict Output\n",
    "y_pred_lr= clf_lr.predict(X_train) \n",
    "accuracy_score(y_train,y_pred_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 48.92%\n",
      "Specificity(ability to detect Not rain in normal days): 94.72%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visual_cm(y_train,y_pred_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['lon', 'daysin', 'MaxTemp_year_diff', 'WindGustX_month_diff',\n",
       "       'WindGustX_year_diff', 'Moree', 'Nuriootpa', 'Penrith', 'Sale',\n",
       "       'SydneyAirport', 'Uluru', 'Watsonia'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 454,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# see the features removed by lasso\n",
    "sel_ = SelectFromModel(LogisticRegression(C=1, penalty='l1', solver='liblinear')).fit(X_train, y_train)\n",
    "lasso_removed_feats = X_train.columns[(sel_.estimator_.coef_ == 0).ravel().tolist()]\n",
    "lasso_removed_feats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took  13.19 seconds  for 5-fold CV using 10 most important features\n",
      "cv scores using 15 most important features: [0.83951085 0.83511905 0.82353896 0.84025974 0.83262987]\n",
      "Average score: 0.8342116936055305\n",
      "\n",
      "Took  22.73 seconds  for 5-fold CV using 15 most important features\n",
      "cv scores using 15 most important features: [0.83951085 0.83511905 0.82353896 0.84025974 0.83262987]\n",
      "Average score: 0.8384973832959602\n",
      "\n",
      "Took 200.18 seconds for 5-fold CV using all feature\n",
      "cv scores using all features: [0.84849305 0.7719697  0.75097403 0.83825758 0.84025974]\n",
      "Average score: 0.8099908171748169\n",
      "\n",
      "Using most important 15 features IMPROVED average CV accuracy by 2.85 %\n"
     ]
    }
   ],
   "source": [
    "predictor_coef_lr, impt_15f_lr, scores_impt_lr, scores_all_lr = cv_important_features(clf_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Rainfall_year_diff',\n",
       " 'Rainfall_month_diff',\n",
       " 'MinTemp',\n",
       " 'Humidity3pm',\n",
       " 'MaxTemp',\n",
       " 'Pressure3pm_month_diff',\n",
       " 'Pressure3pm',\n",
       " 'Pressure3pm_lag1',\n",
       " 'MinTemp_month_diff',\n",
       " 'WindGustY_month_diff',\n",
       " 'MaxTemp_month_diff',\n",
       " 'WindGustY_year_diff',\n",
       " 'Wind9amY',\n",
       " 'WindGustY',\n",
       " 'Humidity3pm_lag1']"
      ]
     },
     "execution_count": 457,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# most important features by LR\n",
    "impt_15f_lr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2 SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# small C means high tolerance of misclassification\n",
    "clf_svc = svm.SVC(kernel='linear', C=1)\n",
    "\n",
    "clf_svc.fit(X_train, y_train)\n",
    "#Predict Output\n",
    "predicted= clf_svc.predict(X_train) \n",
    "accuracy_score(y_train,y_pred)\n",
    "# start_time = time.time()\n",
    "# scores_svc = cross_val_score(clf_svc, X_train, y_train, cv=3, scoring='accuracy')\n",
    "# print(\"SVC took--- %s seconds ---\" % round((time.time() - start_time),2))\n",
    "# scores_svc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "predictor_coef_svc, impt_15f_svc, scores_impt_svc, scores_all_svc = cv_important_features(clf_svc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.3 KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8642438934643565"
      ]
     },
     "execution_count": 468,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "knn = KNeighborsClassifier(n_neighbors=8)\n",
    "# too slow, use most important features from LR\n",
    "knn.fit(X_train[impt_15f_lr], y_train)\n",
    "#Predict Output\n",
    "y_pred_knn= knn.predict(X_train[impt_15f_lr]) \n",
    "accuracy_score(y_train,y_pred_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # This one used 3 neighbors, overfit\n",
    "# start_time = time.time()\n",
    "\n",
    "# scores = cross_val_score(knn3, X_train, y_train, cv=5, scoringz='accuracy')\n",
    "\n",
    "# print(\"KNN took--- %s seconds ---\" % round((time.time() - start_time),2))\n",
    "# scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN took--- 41.33 seconds --- 5F cv\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.83675855, 0.83133117, 0.83483766])"
      ]
     },
     "execution_count": 469,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_time = time.time()\n",
    "\n",
    "scores_5 = cross_val_score(knn, X_train[impt_15f_lr], y_train, cv=3, scoring='accuracy')\n",
    "\n",
    "print(\"KNN took--- %s seconds --- 3F cv\" % round((time.time() - start_time),2))\n",
    "scores_5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### K=5 overfit: 5% difference\n",
    "#### K=8 overfit, 3% diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predictor_coef_knn, impt_15f_knn, scores_impt_knn, scores_all_knn = cv_important_features(knn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.4 Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8536054804601682"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "#random forest\n",
    "rfc=RandomForestClassifier(random_state=42, max_features='auto', n_estimators= 200, max_depth=8, criterion='gini')\n",
    "\n",
    "rfc.fit(X_train, y_train)\n",
    "\n",
    "y_pred_rfc=rfc.predict(X_train)\n",
    "accuracy_score(y_train,y_pred_rfc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 43.83%\n",
      "Specificity(ability to detect Not rain in normal days): 97.31%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visual_cm(y_train,y_pred_rfc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took  69.73 seconds  for 5-fold CV using 10 most important features\n",
      "cv scores using 15 most important features: [0.8476814  0.84345238 0.83495671 0.84545455 0.84404762]\n",
      "Average score: 0.8431185315865528\n",
      "\n",
      "Took  75.36 seconds  for 5-fold CV using 15 most important features\n",
      "cv scores using 15 most important features: [0.8476814  0.84345238 0.83495671 0.84545455 0.84404762]\n",
      "Average score: 0.8434864670888155\n",
      "\n",
      "Took 122.08 seconds for 5-fold CV using all feature\n",
      "cv scores using all features: [0.84697798 0.84090909 0.83555195 0.84426407 0.84366883]\n",
      "Average score: 0.8422743833552232\n",
      "\n",
      "Using most important 15 features IMPROVED average CV accuracy by 0.12 %\n"
     ]
    }
   ],
   "source": [
    "predictor_coef_rfc, impt_15f_rfc, scores_impt_rfc, scores_all_r10c = cv_important_features(rfc, 1)\n",
    "predictor_coef_rfc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_roc_curve(rfc, X_train, y_train)\n",
    "plot_roc_curve(sgd_clf, X_train, y_train)\n",
    "plot_roc_curve(clf_lr, X_train, y_train)\n",
    "plot_roc_curve(knn, X_train[impt_15f_lr], y_train)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Select best features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clf = Pipeline([\n",
    "#   ('feature_selection', SelectFromModel(LinearSVC(penalty=\"l1\"))),\n",
    "#   ('classification', RandomForestClassifier())\n",
    "# ])\n",
    "# clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.1 based on coeffients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LReg</th>\n",
       "      <th>RamF</th>\n",
       "      <th>SGD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rainfall_year_diff</td>\n",
       "      <td>Humidity3pm</td>\n",
       "      <td>MaxTemp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rainfall_month_diff</td>\n",
       "      <td>Humidity3pm_year_diff</td>\n",
       "      <td>daycos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MinTemp</td>\n",
       "      <td>Humidity3pm_month_diff</td>\n",
       "      <td>monthsin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Humidity3pm</td>\n",
       "      <td>Rainfall</td>\n",
       "      <td>lon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MaxTemp</td>\n",
       "      <td>RainToday</td>\n",
       "      <td>Humidity9am</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Pressure3pm_month_diff</td>\n",
       "      <td>Rainfall_year_diff</td>\n",
       "      <td>monthcos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Pressure3pm</td>\n",
       "      <td>Pressure3pm_month_diff</td>\n",
       "      <td>Hobart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Pressure3pm_lag1</td>\n",
       "      <td>Humidity9am</td>\n",
       "      <td>yearsin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>MinTemp_month_diff</td>\n",
       "      <td>Pressure3pm</td>\n",
       "      <td>yearcos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WindGustY_month_diff</td>\n",
       "      <td>Rainfall_month_diff</td>\n",
       "      <td>Brisbane</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>MaxTemp_month_diff</td>\n",
       "      <td>Pressure3pm_year_diff</td>\n",
       "      <td>WindGustX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WindGustY_year_diff</td>\n",
       "      <td>Humidity3pm_lag1</td>\n",
       "      <td>Ballarat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Wind9amY</td>\n",
       "      <td>MinTemp_month_diff</td>\n",
       "      <td>MinTemp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>WindGustY</td>\n",
       "      <td>MinTemp</td>\n",
       "      <td>Bendigo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Humidity3pm_lag1</td>\n",
       "      <td>MaxTemp</td>\n",
       "      <td>Dartmoor</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      LReg                    RamF          SGD\n",
       "0       Rainfall_year_diff             Humidity3pm      MaxTemp\n",
       "1      Rainfall_month_diff   Humidity3pm_year_diff       daycos\n",
       "2                  MinTemp  Humidity3pm_month_diff     monthsin\n",
       "3              Humidity3pm                Rainfall          lon\n",
       "4                  MaxTemp               RainToday  Humidity9am\n",
       "5   Pressure3pm_month_diff      Rainfall_year_diff     monthcos\n",
       "6              Pressure3pm  Pressure3pm_month_diff       Hobart\n",
       "7         Pressure3pm_lag1             Humidity9am      yearsin\n",
       "8       MinTemp_month_diff             Pressure3pm      yearcos\n",
       "9     WindGustY_month_diff     Rainfall_month_diff     Brisbane\n",
       "10      MaxTemp_month_diff   Pressure3pm_year_diff    WindGustX\n",
       "11     WindGustY_year_diff        Humidity3pm_lag1     Ballarat\n",
       "12                Wind9amY      MinTemp_month_diff      MinTemp\n",
       "13               WindGustY                 MinTemp      Bendigo\n",
       "14        Humidity3pm_lag1                 MaxTemp     Dartmoor"
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_top15 = pd.DataFrame(\n",
    "    {\n",
    "     'LReg': impt_15f_lr, \n",
    "     #'SVC': impt_15f_svc,\n",
    "     'RamF': impt_15f_rfc,\n",
    "     'SGD':impt_15f_sgd\n",
    "    })\n",
    "f_top15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.2  use RFE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 464,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "\n",
    "# n_features_to_select=1 to rank all features\n",
    "selector = RFE(sgd_clf, n_features_to_select=1, step=1)\n",
    "selector = selector.fit(X_train, y_train)\n",
    "\n",
    "rank1 = selector.ranking_\n",
    "\n",
    "d1 = {} \n",
    "for key in l: \n",
    "    for value in rank1: \n",
    "        d1[key] = value \n",
    "        np.delete(rank1, np.argwhere(rank1 == 6))\n",
    "        break\n",
    "\n",
    "predictor_rank = {k: v for k, v in sorted(d1.items(), reverse=True, key=lambda item: abs(item[1]))}\n",
    "# select top 10 features \n",
    "impt_15_rfe= [k for k,v in predictor_rank.items()][:15]\n",
    "f_top15['RFE_sgd'] = impt_15_rfe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.3 Most important features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LReg</th>\n",
       "      <th>RamF</th>\n",
       "      <th>SGD</th>\n",
       "      <th>RFE_sgd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rainfall_year_diff</td>\n",
       "      <td>Humidity3pm</td>\n",
       "      <td>MaxTemp</td>\n",
       "      <td>MinTemp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rainfall_month_diff</td>\n",
       "      <td>Humidity3pm_year_diff</td>\n",
       "      <td>daycos</td>\n",
       "      <td>MaxTemp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MinTemp</td>\n",
       "      <td>Humidity3pm_month_diff</td>\n",
       "      <td>monthsin</td>\n",
       "      <td>Rainfall</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Humidity3pm</td>\n",
       "      <td>Rainfall</td>\n",
       "      <td>lon</td>\n",
       "      <td>Humidity9am</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MaxTemp</td>\n",
       "      <td>RainToday</td>\n",
       "      <td>Humidity9am</td>\n",
       "      <td>Humidity3pm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Pressure3pm_month_diff</td>\n",
       "      <td>Rainfall_year_diff</td>\n",
       "      <td>monthcos</td>\n",
       "      <td>Pressure3pm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Pressure3pm</td>\n",
       "      <td>Pressure3pm_month_diff</td>\n",
       "      <td>Hobart</td>\n",
       "      <td>RainToday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Pressure3pm_lag1</td>\n",
       "      <td>Humidity9am</td>\n",
       "      <td>yearsin</td>\n",
       "      <td>lat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>MinTemp_month_diff</td>\n",
       "      <td>Pressure3pm</td>\n",
       "      <td>yearcos</td>\n",
       "      <td>lon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WindGustY_month_diff</td>\n",
       "      <td>Rainfall_month_diff</td>\n",
       "      <td>Brisbane</td>\n",
       "      <td>daysin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>MaxTemp_month_diff</td>\n",
       "      <td>Pressure3pm_year_diff</td>\n",
       "      <td>WindGustX</td>\n",
       "      <td>daycos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WindGustY_year_diff</td>\n",
       "      <td>Humidity3pm_lag1</td>\n",
       "      <td>Ballarat</td>\n",
       "      <td>yearsin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Wind9amY</td>\n",
       "      <td>MinTemp_month_diff</td>\n",
       "      <td>MinTemp</td>\n",
       "      <td>yearcos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>WindGustY</td>\n",
       "      <td>MinTemp</td>\n",
       "      <td>Bendigo</td>\n",
       "      <td>monthsin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Humidity3pm_lag1</td>\n",
       "      <td>MaxTemp</td>\n",
       "      <td>Dartmoor</td>\n",
       "      <td>monthcos</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      LReg                    RamF          SGD      RFE_sgd\n",
       "0       Rainfall_year_diff             Humidity3pm      MaxTemp      MinTemp\n",
       "1      Rainfall_month_diff   Humidity3pm_year_diff       daycos      MaxTemp\n",
       "2                  MinTemp  Humidity3pm_month_diff     monthsin     Rainfall\n",
       "3              Humidity3pm                Rainfall          lon  Humidity9am\n",
       "4                  MaxTemp               RainToday  Humidity9am  Humidity3pm\n",
       "5   Pressure3pm_month_diff      Rainfall_year_diff     monthcos  Pressure3pm\n",
       "6              Pressure3pm  Pressure3pm_month_diff       Hobart    RainToday\n",
       "7         Pressure3pm_lag1             Humidity9am      yearsin          lat\n",
       "8       MinTemp_month_diff             Pressure3pm      yearcos          lon\n",
       "9     WindGustY_month_diff     Rainfall_month_diff     Brisbane       daysin\n",
       "10      MaxTemp_month_diff   Pressure3pm_year_diff    WindGustX       daycos\n",
       "11     WindGustY_year_diff        Humidity3pm_lag1     Ballarat      yearsin\n",
       "12                Wind9amY      MinTemp_month_diff      MinTemp      yearcos\n",
       "13               WindGustY                 MinTemp      Bendigo     monthsin\n",
       "14        Humidity3pm_lag1                 MaxTemp     Dartmoor     monthcos"
      ]
     },
     "execution_count": 470,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_top15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "common features in all methods: {'MaxTemp', 'MinTemp'} \n",
      "frequencies:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'MaxTemp': 4,\n",
       " 'MinTemp': 4,\n",
       " 'Humidity3pm': 3,\n",
       " 'Pressure3pm': 3,\n",
       " 'Humidity9am': 3,\n",
       " 'MinTemp_month_diff': 2,\n",
       " 'Pressure3pm_month_diff': 2,\n",
       " 'Rainfall_year_diff': 2,\n",
       " 'Humidity3pm_lag1': 2,\n",
       " 'Rainfall_month_diff': 2,\n",
       " 'Rainfall': 2,\n",
       " 'RainToday': 2,\n",
       " 'daycos': 2,\n",
       " 'monthsin': 2,\n",
       " 'lon': 2,\n",
       " 'monthcos': 2,\n",
       " 'yearsin': 2,\n",
       " 'yearcos': 2,\n",
       " 'WindGustY_month_diff': 1,\n",
       " 'WindGustY': 1,\n",
       " 'MaxTemp_month_diff': 1,\n",
       " 'Pressure3pm_lag1': 1,\n",
       " 'Wind9amY': 1,\n",
       " 'WindGustY_year_diff': 1,\n",
       " 'Humidity3pm_year_diff': 1,\n",
       " 'Humidity3pm_month_diff': 1,\n",
       " 'Pressure3pm_year_diff': 1,\n",
       " 'Hobart': 1,\n",
       " 'Brisbane': 1,\n",
       " 'WindGustX': 1,\n",
       " 'Ballarat': 1,\n",
       " 'Bendigo': 1,\n",
       " 'Dartmoor': 1,\n",
       " 'lat': 1,\n",
       " 'daysin': 1}"
      ]
     },
     "execution_count": 476,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def longestCommonFeatures(lists):\n",
    "    \n",
    "    l1 = set(lists[0])\n",
    "    ppl = {}\n",
    "    for i in l1:\n",
    "        if i not in ppl:\n",
    "            ppl[i] = 1\n",
    "        else:\n",
    "            ppl[i] += 1\n",
    "            \n",
    "            \n",
    "    for l in lists[1:]:\n",
    "        common = set(l).intersection(l1)\n",
    "        \n",
    "        for i in l:\n",
    "            if i not in ppl:\n",
    "                ppl[i] = 1\n",
    "            else:\n",
    "                ppl[i] += 1\n",
    "                \n",
    "        l1 = common\n",
    "    \n",
    "    \n",
    "    ppl = {k: v for k, v in sorted(ppl.items(), reverse=True, key=lambda item: abs(item[1]))}\n",
    "    \n",
    "    return common, ppl\n",
    "\n",
    "lists = [impt_15f_lr, impt_15f_rfc, impt_15f_sgd, impt_15_rfe]\n",
    "common, ppl = longestCommonFeatures(lists)\n",
    "print(\"common features in all methods:\",common, \"\\nfrequencies:\")\n",
    "ppl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *select features based on importance weights.\n",
    "##### same with 1st method, it uses coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.feature_selection import SelectFromModel\n",
    "# from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# selector = SelectFromModel(estimator= sgd_clf).fit(X_train, y_train)\n",
    "# selector.estimator_.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# selector.threshold_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# selector.get_support()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# selector.transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### use important features saves time and doesn't lower accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6 Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VotingClassifier(estimators=[('lr',\n",
       "                              LogisticRegression(C=1, penalty='l1',\n",
       "                                                 solver='liblinear')),\n",
       "                             ('rf',\n",
       "                              RandomForestClassifier(max_depth=8,\n",
       "                                                     n_estimators=200,\n",
       "                                                     random_state=42)),\n",
       "                             ('sgd', SGDClassifier(random_state=42)),\n",
       "                             ('AdamBoosting',\n",
       "                              AdaBoostClassifier(learning_rate=1,\n",
       "                                                 n_estimators=100)),\n",
       "                             ('GradientBoosting',\n",
       "                              GradientBoostingClassifier(random_state=0))])"
      ]
     },
     "execution_count": 354,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "voting_clf = VotingClassifier(\n",
    "    estimators=[('lr', clf_lr), ('rf', rfc), ('sgd', sgd_clf), ('AdamBoosting', adaB), ('GradientBoosting', gbc)],\n",
    "    voting='hard')\n",
    "voting_clf.fit(X_train, y_train)\n",
    "\n",
    "# add knn and svc later"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training data sccuracy: 0.8527505113581022\n"
     ]
    }
   ],
   "source": [
    "y_pred_vote = voting_clf.predict(X_train)\n",
    "score = accuracy_score(y_train, y_pred_vote)\n",
    "print(\"training data sccuracy:\",score )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 45.80%\n",
      "Specificity(ability to detect Not rain in normal days): 96.64%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visual_cm(y_train, y_pred_vote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv accuracy: 0.8475523970996718\n"
     ]
    }
   ],
   "source": [
    "voting_clf.fit(X_train1, y_train1)\n",
    "score_cv_vote = voting_clf.score(X_valid, y_valid)\n",
    "print(\"cv accuracy:\", score_cv_vote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dnn\n",
      "Sequential 0.8695143991948139\n",
      "not dnn\n",
      "LogisticRegression 0.8448609863529616\n",
      "not dnn\n",
      "RandomForestClassifier 0.8536054804601682\n",
      "not dnn\n",
      "SGDClassifier 0.8445254921483534\n",
      "not dnn\n",
      "VotingClassifier 0.8474367160528565\n"
     ]
    }
   ],
   "source": [
    "for clf in (model_dnn, clf_lr, rfc, sgd_clf, voting_clf):\n",
    "    \n",
    "    if (clf != model_dnn):\n",
    "        y_pred = clf.predict(X_train)\n",
    "    else:\n",
    "        y_pred = [int(i > .5) for i in clf.predict(X_train)]\n",
    "        \n",
    "    print(clf.__class__.__name__, accuracy_score(y_train, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### no improvement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7 Boosting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7.1 Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8529500887407472"
      ]
     },
     "execution_count": 338,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train1, X_valid, y_train1, y_valid = train_test_split(X_train, y_train, random_state=0)\n",
    "\n",
    "gbc = GradientBoostingClassifier(random_state=0)\n",
    "gbc.fit(X_train1, y_train1)\n",
    "gbc.score(X_valid, y_valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 51.54%\n",
      "Specificity(ability to detect Not rain in normal days): 95.54%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred_gbc = gbc.predict(X_train)\n",
    "visual_cm(y_train, y_pred_gbc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7.2 AdaBoosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "adaB = AdaBoostClassifier(\n",
    "    n_estimators=100,\n",
    "    learning_rate=1\n",
    ")\n",
    "\n",
    "adaB.fit(X_train, y_train)\n",
    "y_pred_ada = adaB.predict(X_train)\n",
    "score_ada = accuracy_score(y_train, y_pred_ada)\n",
    "print(\"training data sccuracy:\",score_ada )\n",
    "\n",
    "adaB.fit(X_train1, y_train1)\n",
    "score = adaB.score(X_valid, y_valid)\n",
    "print(\"validation accuracy:\",)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 50.31%\n",
      "Specificity(ability to detect Not rain in normal days): 94.79%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visual_cm(y_train, y_pred_ada)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7.3 Costomized boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "metadata": {},
   "outputs": [],
   "source": [
    "def boosting(clf, X_train, y_train):\n",
    "    \n",
    "    clf1 = clf\n",
    "    clf.fit(X_train, y_train)\n",
    "    y2 = y - clf.predict(X_train)\n",
    "    clf2 = clf\n",
    "    clf2.fit(X_train, y2)\n",
    "    y3 = y2 - clf2.predict(X_train)\n",
    "    clf3 = clf\n",
    "    clf3.fit(X_train, y3)\n",
    "    y_pred = sum(clf.predict(X_train) for tree in (clf1, clf2, clf3))\n",
    "    print(clf.__class__.__name__, \"boosting accuracy:\",accuracy_score(y_train, y_pred))\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SGDClassifier boosting accuracy: 0.7765392149435613\n"
     ]
    }
   ],
   "source": [
    "y_pred_bst = boosting(sgd_clf, X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 0.00%\n",
      "Specificity(ability to detect Not rain in normal days): 100.00%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visual_cm(y_train, y_pred_bst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *4.7 CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array(X_train[:])\n",
    "y = y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "# validation set\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.2,random_state = 120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((73920,), (18481,))"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train.shape, Y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((73920, 102), (18481, 102))"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)\n",
    "x_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((73920, 102, 1), (18481, 102, 1))"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train = np.asarray(Y_train).astype('float32').reshape((-1,1))\n",
    "Y_test = np.asarray(Y_test).astype('float32').reshape((-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((73920, 1), (18481, 1))"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train.shape, Y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 256\n",
    "num_classes = 1\n",
    "epochs = 100\n",
    "input_shape=(x_train.shape[1],1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "intput_shape=(x_train.shape[1], 1)\n",
    "model.add(Conv1D(128, kernel_size=3,padding = 'same',activation='relu', input_shape=input_shape))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling1D(pool_size=(2)))\n",
    "model.add(Conv1D(128,kernel_size=3,padding = 'same', activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling1D(pool_size=(2)))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(64, activation='tanh'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(32, activation='tanh'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(num_classes, activation='sigmoid'))\n",
    "model.summary()\n",
    "\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "2310/2310 [==============================] - 35s 15ms/step - loss: 0.3575 - accuracy: 0.8473 - val_loss: 0.3514 - val_accuracy: 0.8497\n",
      "Epoch 2/10\n",
      "2310/2310 [==============================] - 34s 15ms/step - loss: 0.3564 - accuracy: 0.8481 - val_loss: 0.3494 - val_accuracy: 0.8482\n",
      "Epoch 3/10\n",
      "2310/2310 [==============================] - 37s 16ms/step - loss: 0.3551 - accuracy: 0.8479 - val_loss: 0.3519 - val_accuracy: 0.8511\n",
      "Epoch 4/10\n",
      "2310/2310 [==============================] - 36s 16ms/step - loss: 0.3528 - accuracy: 0.8487 - val_loss: 0.3531 - val_accuracy: 0.8524\n",
      "Epoch 5/10\n",
      "2310/2310 [==============================] - 36s 15ms/step - loss: 0.3524 - accuracy: 0.8491 - val_loss: 0.3476 - val_accuracy: 0.8490\n",
      "Epoch 6/10\n",
      "2310/2310 [==============================] - 35s 15ms/step - loss: 0.3531 - accuracy: 0.8486 - val_loss: 0.3445 - val_accuracy: 0.8524\n",
      "Epoch 7/10\n",
      "2310/2310 [==============================] - 36s 15ms/step - loss: 0.3521 - accuracy: 0.8503 - val_loss: 0.3436 - val_accuracy: 0.8522\n",
      "Epoch 8/10\n",
      "2310/2310 [==============================] - 35s 15ms/step - loss: 0.3519 - accuracy: 0.8510 - val_loss: 0.3502 - val_accuracy: 0.8523\n",
      "Epoch 9/10\n",
      "2310/2310 [==============================] - 38s 17ms/step - loss: 0.3519 - accuracy: 0.8506 - val_loss: 0.3531 - val_accuracy: 0.8496\n",
      "Epoch 10/10\n",
      "2310/2310 [==============================] - 38s 16ms/step - loss: 0.3488 - accuracy: 0.8507 - val_loss: 0.3501 - val_accuracy: 0.8486\n"
     ]
    }
   ],
   "source": [
    "# earlyStopping = keras.callbacks.EarlyStopping(monitor='val_loss', patience=0.0005, verbose=0, mode='min')\n",
    "hist_rnn = model.fit(x_train, Y_train, validation_data=(x_test, Y_test), epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(hist_rnn.history).plot(figsize=(8, 5))\n",
    "plt.grid(True)\n",
    "plt.gca().set_ylim(0, 1) # set the vertical range to [0-1]\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pyplot.plot(hist_rnn.history['accuracy'], label='train')\n",
    "pyplot.plot(hist_rnn.history['val_accuracy'], label='test')\n",
    "pyplot.legend()\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_prob_cnn = model.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 44.31%\n",
      "Specificity(ability to detect Not rain in normal days): 97.10%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred_cnn = [int(i > .5) for i in y_prob_cnn]\n",
    "visual_cm(Y_train, y_pred_cnn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.8 DNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_dnn = keras.models.Sequential()\n",
    "model_dnn.add(keras.layers.Flatten(input_shape=[x_train.shape[1],]))\n",
    "model_dnn.add(keras.layers.Dense(300, activation=\"relu\"))\n",
    "model_dnn.add(keras.layers.Dense(200, activation=\"relu\"))\n",
    "model_dnn.add(keras.layers.Dense(150, activation=\"relu\"))\n",
    "model_dnn.add(keras.layers.Dense(100, activation=\"relu\"))\n",
    "model_dnn.add(keras.layers.Dense(1, activation=\"sigmoid\"))\n",
    "\n",
    "model_dnn.compile(loss=\"binary_crossentropy\",\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "2310/2310 [==============================] - 3s 1ms/step - loss: 0.3102 - accuracy: 0.8673 - val_loss: 0.3362 - val_accuracy: 0.8540\n",
      "Epoch 2/15\n",
      "2310/2310 [==============================] - 2s 1ms/step - loss: 0.3093 - accuracy: 0.8680 - val_loss: 0.3286 - val_accuracy: 0.8576\n",
      "Epoch 3/15\n",
      "2310/2310 [==============================] - 2s 1ms/step - loss: 0.3078 - accuracy: 0.8684 - val_loss: 0.3293 - val_accuracy: 0.8584\n"
     ]
    }
   ],
   "source": [
    "earlyStopping = keras.callbacks.EarlyStopping(monitor='val_loss', patience=0.0005, verbose=0, mode='min')\n",
    "hist_dnn = model_dnn.fit(x_train, Y_train, validation_data=(x_test, Y_test), epochs=15, callbacks=[earlyStopping])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "pyplot.plot(hist_dnn.history['loss'], label='train')\n",
    "pyplot.plot(hist_dnn.history['val_loss'], label='test')\n",
    "pyplot.legend()\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pyplot.plot(hist_dnn.history['accuracy'], label='train')\n",
    "pyplot.plot(hist_dnn.history['val_accuracy'], label='test')\n",
    "pyplot.legend()\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set accuracy: 0.8695143991948139\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred_dnn = [int(i > .5) for i in model_dnn.predict(x)]\n",
    "print('Training set accuracy:',accuracy_score(y,y_pred_dnn))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity(ability to detect rain in rainy days): 55.63%\n",
      "Specificity(ability to detect Not rain in normal days): 95.96%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visual_cm(y_train, y_pred_dnn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {},
   "outputs": [],
   "source": [
    "# best method so far"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reference:\n",
    "##### circular data transform: http://blog.davidkaleko.com/feature-engineering-cyclical-features.html  \n",
    "##### Australian weather https://www.finalword.com/map-weather-of-australia/\n",
    "##### Confusion Matrix Visualization ,Medium https://medium.com/@dtuk81/confusion-matrix-visualization-fc31e3f30fea\n",
    "##### Ensemble https://learning.oreilly.com/library/view/hands-on-machine-learning/9781492032632/ch07.html#ensembles_chapter"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
